df$ICD_1[!is.na(df$ICD_1)] <- paste0("D",as.integer(factor(df$ICD_1[!is.na(df$ICD_1)], levels = dz.lv)))
df$ICD_2[!is.na(df$ICD_2)] <- paste0("D",as.integer(factor(df$ICD_2[!is.na(df$ICD_2)], levels = dz.lv)))
df$ICD_3[!is.na(df$ICD_3)] <- paste0("D",as.integer(factor(df$ICD_3[!is.na(df$ICD_3)], levels = dz.lv)))
df$ICD_4[!is.na(df$ICD_4)] <- paste0("D",as.integer(factor(df$ICD_4[!is.na(df$ICD_4)], levels = dz.lv)))
df$ICD_5[!is.na(df$ICD_5)] <- paste0("D",as.integer(factor(df$ICD_5[!is.na(df$ICD_5)], levels = dz.lv)))
df <- df[,c(1,3,7:12)]
colnames(df)[3:7] <- paste0("DZ",1:5)
View(df)
df <- readRDS(paste0("dat/oipd_b1.RDS"))
df <- df[df$src==2,] #### include inpatient only
df$date <- as.integer(df$date)
df$birth <- as.integer(df$birth)
df$ageday <- df$date - df$birth
xv<"ICD_1"
xv<-"ICD_1"
ind <- df[,xv] %in% as.character(1:999)
df[ind,xv] <- NA
formatC(df[,xv], width = 3, flag = "0", format = "d")
formatC(as.integer(df[,xv]), width = 3, flag = "0", format = "d")
formatC(as.integer(df[ind,xv]), width = 3, flag = "0", format = "d")
ind <- df[,xv] %in% as.character(1:999)
df[ind,xv] <- NA
formatC(as.integer(df[!ind,xv]), width = 3, flag = "0", format = "d")
as.integer(df[!ind,xv]
)
View(df)
df <- readRDS(paste0("dat/oipd_b1.RDS"))
df <- df[df$src==2,] #### include inpatient only
df$date <- as.integer(df$date)
df$birth <- as.integer(df$birth)
df$ageday <- df$date - df$birth
ind <- which(df[,xv] %in% as.character(1:999))
df[-ind,xv] <- NA
View(df)
df[ind,xv] <- formatC(as.integer(df[ind,xv]), width = 3, flag = "0", format = "d")
df[ind,xv] <- substr(df[ind,xv],1,2)
View(df)
df <- readRDS(paste0("dat/oipd_b1.RDS"))
df <- df[df$src==2,] #### include inpatient only
df$date <- as.integer(df$date)
df$birth <- as.integer(df$birth)
df$ageday <- df$date - df$birth
for(xv in c("ICD_1","ICD_2","ICD_3","ICD_4","ICD_5")){
ind <- which(df[,xv] %in% as.character(1:999))
df[-ind,xv] <- NA
df[ind,xv] <- formatC(as.integer(df[ind,xv]), width = 3, flag = "0", format = "d")
df[ind,xv] <- substr(df[ind,xv],1,2)
}
ind<- which(!is.na(df$ICD_1)|!is.na(df$ICD_2)|!is.na(df$ICD_3)|!is.na(df$ICD_4)|!is.na(df$ICD_5))
df<-df[ind,]
df <- df[df$ID%in%unique(df$ID)[1:3000],]
df$ID <- as.integer(as.factor(df$ID))
df$ageday <- df$ageday-min(df$ageday)
df$sex <- sample(x = c("M","F"),NROW(df),replace = T)
dz.lv <- sort(unique(c(df$ICD_1, df$ICD_2, df$ICD_3, df$ICD_4, df$ICD_5)))
df$ICD_1[!is.na(df$ICD_1)] <- paste0("D",as.integer(factor(df$ICD_1[!is.na(df$ICD_1)], levels = dz.lv)))
df$ICD_2[!is.na(df$ICD_2)] <- paste0("D",as.integer(factor(df$ICD_2[!is.na(df$ICD_2)], levels = dz.lv)))
df$ICD_3[!is.na(df$ICD_3)] <- paste0("D",as.integer(factor(df$ICD_3[!is.na(df$ICD_3)], levels = dz.lv)))
df$ICD_4[!is.na(df$ICD_4)] <- paste0("D",as.integer(factor(df$ICD_4[!is.na(df$ICD_4)], levels = dz.lv)))
df$ICD_5[!is.na(df$ICD_5)] <- paste0("D",as.integer(factor(df$ICD_5[!is.na(df$ICD_5)], levels = dz.lv)))
df <- df[,c(1,3,7:12)]
colnames(df)[3:7] <- paste0("DZ",1:5)
View(df)
saveRDS(df, "demo_data.RDS")
diagnostic_data <- df
ipseq <- get_ipseq(df = diagnostic_data, var_id = "ID", var_t = "ageday",
var_dz = c("DZ1","DZ2","DZ3","DZ4","DZ5"))
ipseq[1:5]
# Construct raw progression comorbidity network
# from individual progression sequence
dzLevel <- sort(unique(
c(diagnostic_data$DZ1,diagnostic_data$DZ2, diagnostic_data$DZ3, diagnostic_data$DZ4, diagnostic_data$DZ5)
))
res <- comoNet_from_prog_sp(ipseq = ipseq, dz.lv = dzLevel, bidir = F, conditional = F)
raw_net <- res[[1]]
image(raw_net)
require(Matrix)
ipseq <- get_ipseq(df = diagnostic_data, var_id = "ID", var_t = "ageday",
var_dz = c("DZ1","DZ2","DZ3","DZ4","DZ5"))
ipseq[1:5]
# Construct raw progression comorbidity network
# from individual progression sequence
dzLevel <- sort(unique(
c(diagnostic_data$DZ1,diagnostic_data$DZ2, diagnostic_data$DZ3, diagnostic_data$DZ4, diagnostic_data$DZ5)
))
res <- comoNet_from_prog_sp(ipseq = ipseq, dz.lv = dzLevel, bidir = F, conditional = F)
raw_net <- res[[1]]
image(raw_net)
require(igraph)
sub_net <- raw_net[1:30,1:30]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g1 <- graph_from_adjacency_matrix(sub_net,mode="directed",weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
g1$layout <- layout_with_fr
plot(g1)
g1$layout <- layout_in_circle()
plot(g1)
g1$layout <- layout_in_circle
plot(g1)
g1$layout <- layout_with_fr
plot(g1)
sub_net <- raw_net[10:30,10:30]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g1 <- graph_from_adjacency_matrix(sub_net,mode="directed",weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
g1$layout <- layout_with_fr
plot(g1)
g1$layout <- layout_in_circle
plot(g1)
g1$layout <- layout_with_fr
plot(g1)
g1
E(g1)
sub_net
1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/6
g1$layout <- layout_with_fr
plot(g1)
E(g1)$weight
E(g1)$width
g1$layout <- layout_in_circle
plot(g1)
plot(g1, layout=layout_randomly))
plot(g1, layout=layout_randomly)
plot(g1, layout=layout_in_circle(g1))
plot(g1, layout=layout_in_circle)
require(igraph)
sub_net <- raw_net[20:30,20:30]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g1 <- graph_from_adjacency_matrix(sub_net,mode="directed",weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/6
plot(g1, layout=layout_randomly)
plot(g1, layout=layout_in_circle)
plot(g1, layout=layout_randomly)
E(g1)$edge.arrow.size	 <- .1
plot(g1, layout=layout_randomly)
E(g1)$edge.arrow.size	 <- .1
plot(g1, layout=layout_randomly)
plot(g1, layout=layout_in_circle)
E(g1)$edge.arrow.size	 <- .01
plot(g1, layout=layout_randomly)
plot(g1, layout=layout_randomly,edge.arrow.size=.1)
plot(g1, layout=layout_randomly,edge.arrow.size=.5)
plot(g1, layout=layout_in_circle)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
require(igraph)
sub_net <- raw_net[21:30,21:30]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/6
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
sub_net <- raw_net[21:30,21:30]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/6
plot(g0, layout=layout_randomly, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[21:30,21:30]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g1 <- graph_from_adjacency_matrix(sub_net)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/6
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[21:30,21:30]
g1 <- graph_from_adjacency_matrix(sub_net)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/6
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/6
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
require(igraph)
sub_net <- raw_net[21:35,21:35]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/6
plot(g0, layout=layout_randomly, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[21:35,21:35]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/6
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
setwd("C:/Users/user/Desktop/ComoWeb")
df <- readRDS(paste0("dat/oipd_b1.RDS"))
df <- df[df$src==2,] #### include inpatient only
df$date <- as.integer(df$date)
df$birth <- as.integer(df$birth)
df$ageday <- df$date - df$birth
for(xv in c("ICD_1","ICD_2","ICD_3","ICD_4","ICD_5")){
ind <- which(df[,xv] %in% as.character(100:999))
df[-ind,xv] <- NA
df[ind,xv] <- formatC(as.integer(df[ind,xv]), width = 3, flag = "0", format = "d")
df[ind,xv] <- substr(df[ind,xv],1,2)
}
ind<- which(!is.na(df$ICD_1)|!is.na(df$ICD_2)|!is.na(df$ICD_3)|!is.na(df$ICD_4)|!is.na(df$ICD_5))
df<-df[ind,]
df <- df[df$ID%in%unique(df$ID)[1:3000],]
df$ID <- as.integer(as.factor(df$ID))
df$ageday <- df$ageday-min(df$ageday)
df$sex <- sample(x = c("M","F"),NROW(df),replace = T)
dz.lv <- sort(unique(c(df$ICD_1, df$ICD_2, df$ICD_3, df$ICD_4, df$ICD_5)))
df$ICD_1[!is.na(df$ICD_1)] <- paste0("D",as.integer(factor(df$ICD_1[!is.na(df$ICD_1)], levels = dz.lv)))
df$ICD_2[!is.na(df$ICD_2)] <- paste0("D",as.integer(factor(df$ICD_2[!is.na(df$ICD_2)], levels = dz.lv)))
df$ICD_3[!is.na(df$ICD_3)] <- paste0("D",as.integer(factor(df$ICD_3[!is.na(df$ICD_3)], levels = dz.lv)))
df$ICD_4[!is.na(df$ICD_4)] <- paste0("D",as.integer(factor(df$ICD_4[!is.na(df$ICD_4)], levels = dz.lv)))
df$ICD_5[!is.na(df$ICD_5)] <- paste0("D",as.integer(factor(df$ICD_5[!is.na(df$ICD_5)], levels = dz.lv)))
df <- df[,c(1,3,7:12)]
colnames(df)[3:7] <- paste0("DZ",1:5)
saveRDS(df, "demo_data.RDS")
diagnostic_data<-df
ual progression sequence from demo dataset
require(comoNet)
require(Matrix)
head(diagnostic_data)
ipseq <- get_ipseq(df = diagnostic_data, var_id = "ID", var_t = "ageday",
var_dz = c("DZ1","DZ2","DZ3","DZ4","DZ5"))
ipseq[1:5]
# Construct raw progression comorbidity network
# from individual progression sequence
dzLevel <- sort(unique(
c(diagnostic_data$DZ1,diagnostic_data$DZ2, diagnostic_data$DZ3, diagnostic_data$DZ4, diagnostic_data$DZ5)
))
res <- comoNet_from_prog_sp(ipseq = ipseq, dz.lv = dzLevel, bidir = F, conditional = F)
raw_net <- res[[1]]
image(raw_net)
require(igraph)
sub_net <- raw_net[21:35,21:35]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/8
plot(g0, layout=layout_randomly, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
# Construct comorbidity network based on significant OER measure
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[21:35,21:35]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/8
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
sub_net <- raw_net[1:15,1:15]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/10
plot(g0, layout=layout_randomly, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
# Construct comorbidity network based on significant OER measure
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[1:15,1:15]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/10
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
### 20190903
### build raw comoNet v2
setwd("C:/Users/user/Desktop/ComoWeb")
df <- readRDS(paste0("dat/oipd_b1.RDS"))
df <- df[df$src==2,] #### include inpatient only
df$date <- as.integer(df$date)
df$birth <- as.integer(df$birth)
df$ageday <- df$date - df$birth
for(xv in c("ICD_1","ICD_2","ICD_3","ICD_4","ICD_5")){
ind <- which(df[,xv] %in% as.character(200:999))
df[-ind,xv] <- NA
df[ind,xv] <- formatC(as.integer(df[ind,xv]), width = 3, flag = "0", format = "d")
df[ind,xv] <- substr(df[ind,xv],1,2)
}
ind<- which(!is.na(df$ICD_1)|!is.na(df$ICD_2)|!is.na(df$ICD_3)|!is.na(df$ICD_4)|!is.na(df$ICD_5))
df<-df[ind,]
df <- df[df$ID%in%unique(df$ID)[1:3000],]
df$ID <- as.integer(as.factor(df$ID))
df$ageday <- df$ageday-min(df$ageday)
df$sex <- sample(x = c("M","F"),NROW(df),replace = T)
dz.lv <- sort(unique(c(df$ICD_1, df$ICD_2, df$ICD_3, df$ICD_4, df$ICD_5)))
df$ICD_1[!is.na(df$ICD_1)] <- paste0("D",as.integer(factor(df$ICD_1[!is.na(df$ICD_1)], levels = dz.lv)))
df$ICD_2[!is.na(df$ICD_2)] <- paste0("D",as.integer(factor(df$ICD_2[!is.na(df$ICD_2)], levels = dz.lv)))
df$ICD_3[!is.na(df$ICD_3)] <- paste0("D",as.integer(factor(df$ICD_3[!is.na(df$ICD_3)], levels = dz.lv)))
df$ICD_4[!is.na(df$ICD_4)] <- paste0("D",as.integer(factor(df$ICD_4[!is.na(df$ICD_4)], levels = dz.lv)))
df$ICD_5[!is.na(df$ICD_5)] <- paste0("D",as.integer(factor(df$ICD_5[!is.na(df$ICD_5)], levels = dz.lv)))
df <- df[,c(1,3,7:12)]
colnames(df)[3:7] <- paste0("DZ",1:5)
saveRDS(df, "demo_data.RDS")
diagnostic_data<-df
# Convert to individual progression sequence from demo dataset
require(comoNet)
require(Matrix)
head(diagnostic_data)
ipseq <- get_ipseq(df = diagnostic_data, var_id = "ID", var_t = "ageday",
var_dz = c("DZ1","DZ2","DZ3","DZ4","DZ5"))
ipseq[1:5]
# Construct raw progression comorbidity network
# from individual progression sequence
dzLevel <- sort(unique(
c(diagnostic_data$DZ1,diagnostic_data$DZ2, diagnostic_data$DZ3, diagnostic_data$DZ4, diagnostic_data$DZ5)
))
res <- comoNet_from_prog_sp(ipseq = ipseq, dz.lv = dzLevel, bidir = F, conditional = F)
raw_net <- res[[1]]
image(raw_net)
require(igraph)
sub_net <- raw_net[1:15,1:15]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/10
plot(g0, layout=layout_randomly, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
# Construct comorbidity network based on significant OER measure
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[1:15,1:15]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/10
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/10
plot(g0, layout=layout_randomly, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
# Construct comorbidity network based on significant OER measure
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[1:20,1:20]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/10
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[1:20,1:20]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/8
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
require(igraph)
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/8
plot(g0, layout=layout_randomly, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_randomly, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
plot(g1, layout=layout_fr, edge.arrow.size=.5)
plot(g1, layout=layout_with_fr, edge.arrow.size=.5)
plot(g0, layout=layout_with_fr, edge.arrow.size=.5)
Sys.setenv("PKG_CXXFLAGS"="-std=c++11")
Sys.setenv("PKG_CXXFLAGS"="-std=c++11")
library(comoNet)
# Convert to individual progression sequence from demo dataset
require(comoNet)
require(Matrix)
head(diagnostic_data)
ipseq <- get_ipseq(df = diagnostic_data, var_id = "ID", var_t = "ageday",
var_dz = c("DZ1","DZ2","DZ3","DZ4","DZ5"))
ipseq[1:5]
dzLevel <- sort(unique(
c(diagnostic_data$DZ1,diagnostic_data$DZ2, diagnostic_data$DZ3, diagnostic_data$DZ4, diagnostic_data$DZ5)
))
res <- comoNet_from_prog_sp(ipseq = ipseq, dz.lv = dzLevel, bidir = F, conditional = F)
raw_net <- res[[1]]
image(raw_net)
require(igraph)
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/8
plot(g0, layout=layout_with_fr, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
# Construct comorbidity network based on significant OER measure
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[1:20,1:20]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- E(g1)$weight/8
plot(g1, layout=layout_with_fr, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
require(igraph)
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/8
plot(g0, layout=layout_with_fr, edge.arrow.size=.5)
plot(g0, layout=layout_in_circle, edge.arrow.size=.5)
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- E(g0)$weight/8
plot(g0, layout=layout_with_fr, edge.arrow.size=.2)
plot(g0, layout=layout_in_circle, edge.arrow.size=.2)
E(g0)$weight/8
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- 2*E(g0)$weight/max(E(g0)$weight)
plot(g0, layout=layout_with_fr, edge.arrow.size=.2)
plot(g0, layout=layout_in_circle, edge.arrow.size=.2)
# Construct comorbidi
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- 4*E(g0)$weight/max(E(g0)$weight)
plot(g0, layout=layout_with_fr, edge.arrow.size=.2)
plot(g0, layout=layout_in_circle, edge.arrow.size=.2)
# Construct comorbidi
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- 5*E(g0)$weight/max(E(g0)$weight)
plot(g0, layout=layout_with_fr, edge.arrow.size=.2)
plot(g0, layout=layout_in_circle, edge.arrow.size=.2)
# Construct comorbidi
# Construct comorbidity network based on significant OER measure
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[1:20,1:20]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- 5*E(g1)$weight/max(E(g1)$weight)
plot(g1, layout=layout_with_fr, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- 10*E(g0)$weight/max(E(g0)$weight)
plot(g0, layout=layout_with_fr, edge.arrow.size=.2)
plot(g0, layout=layout_in_circle, edge.arrow.size=.2)
# Construct comorbidity network based on significant OER measure
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[1:20,1:20]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- 10*E(g1)$weight/max(E(g1)$weight)
plot(g1, layout=layout_with_fr, edge.arrow.size=.5)
plot(g1, layout=layout_in_circle, edge.arrow.size=.5)
plot(g0, layout=layout_with_fr, edge.arrow.size=.2, vertex.frame.color="white")
require(igraph)
sub_net <- raw_net[1:20,1:20]
ind <- which(rowSums(sub_net)>0 | colSums(sub_net)>0)
sub_net <- sub_net[ind,ind]
g0 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g0 <- set_vertex_attr(g0, "label", value = dzLevel[V(g1)])
E(g0)$width <- 10*E(g0)$weight/max(E(g0)$weight)
plot(g0, layout=layout_with_fr, edge.arrow.size=.2, vertex.frame.color="white")
plot(g0, layout=layout_in_circle, edge.arrow.size=.2, vertex.frame.color="white")
res <- filter_OER(as.matrix(raw_net),sig_lv = 0.05)
OER_net <- res$A_filtered
sub_net <- OER_net[1:20,1:20]
g1 <- graph_from_adjacency_matrix(sub_net, mode="directed", weighted = T)
g1 <- set_vertex_attr(g1, "label", value = dzLevel[V(g1)])
E(g1)$width <- 10*E(g1)$weight/max(E(g1)$weight)
plot(g1, layout=layout_with_fr, edge.arrow.size=.5, vertex.frame.color="white")
plot(g1, layout=layout_in_circle, edge.arrow.size=.5, vertex.frame.color="white")
library(comoNet)
