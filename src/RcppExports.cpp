// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// build_Raw
List build_Raw(List iseq, StringVector dzlv, bool bidir);
RcppExport SEXP _comoNet_build_Raw(SEXP iseqSEXP, SEXP dzlvSEXP, SEXP bidirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type iseq(iseqSEXP);
    Rcpp::traits::input_parameter< StringVector >::type dzlv(dzlvSEXP);
    Rcpp::traits::input_parameter< bool >::type bidir(bidirSEXP);
    rcpp_result_gen = Rcpp::wrap(build_Raw(iseq, dzlv, bidir));
    return rcpp_result_gen;
END_RCPP
}
// build_CondRaw
List build_CondRaw(List iseq, StringVector dzlv, bool bidir);
RcppExport SEXP _comoNet_build_CondRaw(SEXP iseqSEXP, SEXP dzlvSEXP, SEXP bidirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type iseq(iseqSEXP);
    Rcpp::traits::input_parameter< StringVector >::type dzlv(dzlvSEXP);
    Rcpp::traits::input_parameter< bool >::type bidir(bidirSEXP);
    rcpp_result_gen = Rcpp::wrap(build_CondRaw(iseq, dzlv, bidir));
    return rcpp_result_gen;
END_RCPP
}
// build_Raw_sp
List build_Raw_sp(List iseq, StringVector dzlv, bool bidir);
RcppExport SEXP _comoNet_build_Raw_sp(SEXP iseqSEXP, SEXP dzlvSEXP, SEXP bidirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type iseq(iseqSEXP);
    Rcpp::traits::input_parameter< StringVector >::type dzlv(dzlvSEXP);
    Rcpp::traits::input_parameter< bool >::type bidir(bidirSEXP);
    rcpp_result_gen = Rcpp::wrap(build_Raw_sp(iseq, dzlv, bidir));
    return rcpp_result_gen;
END_RCPP
}
// build_CondRaw_sp
List build_CondRaw_sp(List iseq, StringVector dzlv, bool bidir);
RcppExport SEXP _comoNet_build_CondRaw_sp(SEXP iseqSEXP, SEXP dzlvSEXP, SEXP bidirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type iseq(iseqSEXP);
    Rcpp::traits::input_parameter< StringVector >::type dzlv(dzlvSEXP);
    Rcpp::traits::input_parameter< bool >::type bidir(bidirSEXP);
    rcpp_result_gen = Rcpp::wrap(build_CondRaw_sp(iseq, dzlv, bidir));
    return rcpp_result_gen;
END_RCPP
}
// filter_OER
List filter_OER(arma::mat A, double sig_lv);
RcppExport SEXP _comoNet_filter_OER(SEXP ASEXP, SEXP sig_lvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type sig_lv(sig_lvSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_OER(A, sig_lv));
    return rcpp_result_gen;
END_RCPP
}
// filter_phi
List filter_phi(arma::mat A, double sig_lv);
RcppExport SEXP _comoNet_filter_phi(SEXP ASEXP, SEXP sig_lvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type sig_lv(sig_lvSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_phi(A, sig_lv));
    return rcpp_result_gen;
END_RCPP
}
// filter_dispar
List filter_dispar(arma::mat A, double sig_lv);
RcppExport SEXP _comoNet_filter_dispar(SEXP ASEXP, SEXP sig_lvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type sig_lv(sig_lvSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_dispar(A, sig_lv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_comoNet_build_Raw", (DL_FUNC) &_comoNet_build_Raw, 3},
    {"_comoNet_build_CondRaw", (DL_FUNC) &_comoNet_build_CondRaw, 3},
    {"_comoNet_build_Raw_sp", (DL_FUNC) &_comoNet_build_Raw_sp, 3},
    {"_comoNet_build_CondRaw_sp", (DL_FUNC) &_comoNet_build_CondRaw_sp, 3},
    {"_comoNet_filter_OER", (DL_FUNC) &_comoNet_filter_OER, 2},
    {"_comoNet_filter_phi", (DL_FUNC) &_comoNet_filter_phi, 2},
    {"_comoNet_filter_dispar", (DL_FUNC) &_comoNet_filter_dispar, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_comoNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
